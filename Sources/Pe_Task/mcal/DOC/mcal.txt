=============================================================================
List of generated methods in project: mcal

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "wdi"       (component BitIO)
   - wdi_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - wdi_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - wdi_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - wdi_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - wdi_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "Timer"     (component TimerInt)
   - Timer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Timer_Disable -This method disables the component - it stops the timer. No events will be generated.
   - Timer_EnableEvent -This method enables the events.
   - Timer_DisableEvent -This method disables the events.

Module "CAN0"      (component FreescaleCAN)
   - CAN0_Enable -Enables the component - it turns on the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - CAN0_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - CAN0_EnableEvent -Enables the events. This method is available if the interrupt service/event property is enabled and at 
                least one event is enabled.
   - CAN0_DisableEvent -Disables the events. This method is available if the interrupt service/event property is enabled and at 
                least one event is enabled.
   - CAN0_SetAcceptanceCode -Sets the acceptance code registers. This method writes a code mask directly to the acceptance code 
                registers.
   - CAN0_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CAN0_SetAcceptanceMode -Sets the acceptance mode register.
   - CAN0_SendFrame -Sends the frame via the CAN device. Using this method the user can send own message to the CAN bus. This 
                method allows to specify CAN buffer number, message ID, data to be sent and frame type 
                (DATA_FRAME/REMOTE_FRAME).
   - CAN0_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.
   - CAN0_GetStateTX -Returns a value of the transmission complete flags.
   - CAN0_GetStateRX -Returns a value of the reception complete flag.
   - CAN0_GetError -Returns the content of the receiver flag register.
   - CAN0_SendFrameExt -Sends a frame. This method automatically selects a free transmit buffer for data transmission. The user 
                cannot specify a transmit buffer.

Module "CAN1"      (component FreescaleCAN)
   - CAN1_Enable -Enables the component - it turns on the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - CAN1_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - CAN1_EnableEvent -Enables the events. This method is available if the interrupt service/event property is enabled and at 
                least one event is enabled.
   - CAN1_DisableEvent -Disables the events. This method is available if the interrupt service/event property is enabled and at 
                least one event is enabled.
   - CAN1_SetAcceptanceCode -Sets the acceptance code registers. This method writes a code mask directly to the acceptance code 
                registers.
   - CAN1_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CAN1_SetAcceptanceMode -Sets the acceptance mode register.
   - CAN1_SendFrame -Sends the frame via the CAN device. Using this method the user can send own message to the CAN bus. This 
                method allows to specify CAN buffer number, message ID, data to be sent and frame type 
                (DATA_FRAME/REMOTE_FRAME).
   - CAN1_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.
   - CAN1_GetStateTX -Returns a value of the transmission complete flags.
   - CAN1_GetStateRX -Returns a value of the reception complete flag.
   - CAN1_GetError -Returns the content of the receiver flag register.
   - CAN1_SendFrameExt -Sends a frame. This method automatically selects a free transmit buffer for data transmission. The user 
                cannot specify a transmit buffer.

Module "CAN4"      (component FreescaleCAN)
   - CAN4_Enable -Enables the component - it turns on the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - CAN4_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - CAN4_EnableEvent -Enables the events. This method is available if the interrupt service/event property is enabled and at 
                least one event is enabled.
   - CAN4_DisableEvent -Disables the events. This method is available if the interrupt service/event property is enabled and at 
                least one event is enabled.
   - CAN4_SetAcceptanceCode -Sets the acceptance code registers. This method writes a code mask directly to the acceptance code 
                registers.
   - CAN4_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CAN4_SetAcceptanceMode -Sets the acceptance mode register.
   - CAN4_SendFrame -Sends the frame via the CAN device. Using this method the user can send own message to the CAN bus. This 
                method allows to specify CAN buffer number, message ID, data to be sent and frame type 
                (DATA_FRAME/REMOTE_FRAME).
   - CAN4_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.
   - CAN4_GetStateTX -Returns a value of the transmission complete flags.
   - CAN4_GetStateRX -Returns a value of the reception complete flag.
   - CAN4_GetError -Returns the content of the receiver flag register.
   - CAN4_SendFrameExt -Sends a frame. This method automatically selects a free transmit buffer for data transmission. The user 
                cannot specify a transmit buffer.

Module "CPU_CHG_S" (component BitIO)
   - CPU_CHG_S_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_CHG_P" (component BitIO)
   - CPU_CHG_P_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "ISO_CTRL_POS" (component BitIO)
   - ISO_CTRL_POS_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "ISO_CTRL_NEG" (component BitIO)
   - ISO_CTRL_NEG_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "ISO_POW"   (component BitIO)
   - ISO_POW_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUDI1"    (component BitIO)
   - CPUDI1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CPUDI2"    (component BitIO)
   - CPUDI2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CPUDI3"    (component BitIO)
   - CPUDI3_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CPUDI4"    (component BitIO)
   - CPUDI4_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "OV_Power"  (component BitIO)
   - OV_Power_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "UV_Power"  (component BitIO)
   - UV_Power_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CPU_SUMV_SDA" (component BitIO)
   - CPU_SUMV_SDA_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - CPU_SUMV_SDA_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - CPU_SUMV_SDA_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_SUMV_SCL" (component BitIO)
   - CPU_SUMV_SCL_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_SUMV_EXT_SDA" (component BitIO)
   - CPU_SUMV_EXT_SDA_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - CPU_SUMV_EXT_SDA_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - CPU_SUMV_EXT_SDA_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_SUMV_EXT_SCL" (component BitIO)
   - CPU_SUMV_EXT_SCL_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_SUMV_EXT_RDY" (component BitIO)
   - CPU_SUMV_EXT_RDY_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "SUMV_EXT_POW" (component BitIO)
   - SUMV_EXT_POW_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "ExternFlash_Rst" (component BitIO)
   - ExternFlash_Rst_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExternFlash_Rst_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExternFlash_Rst_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - ExternFlash_Rst_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ExternFlash_Rst_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ExternFlash_Cs" (component BitIO)
   - ExternFlash_Cs_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExternFlash_Cs_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExternFlash_Cs_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - ExternFlash_Cs_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ExternFlash_Cs_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ExternFlash_Sck" (component BitIO)
   - ExternFlash_Sck_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExternFlash_Sck_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExternFlash_Sck_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - ExternFlash_Sck_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ExternFlash_Sck_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ExternFlash_Si" (component BitIO)
   - ExternFlash_Si_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExternFlash_Si_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExternFlash_Si_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - ExternFlash_Si_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ExternFlash_Si_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ExternFlash_So" (component BitIO)
   - ExternFlash_So_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExternFlash_So_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExternFlash_So_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - ExternFlash_So_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ExternFlash_So_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ExternTimer_Int" (component BitIO)
   - ExternTimer_Int_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "ExternTimer_Scl" (component BitIO)
   - ExternTimer_Scl_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExternTimer_Scl_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExternTimer_Scl_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - ExternTimer_Scl_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ExternTimer_Scl_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ExternTimer_Sda" (component BitIO)
   - ExternTimer_Sda_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExternTimer_Sda_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExternTimer_Sda_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - ExternTimer_Sda_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ExternTimer_Sda_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "PORTA0"    (component BitIO)
   - PORTA0_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "PORTA1"    (component BitIO)
   - PORTA1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "PORTA2"    (component BitIO)
   - PORTA2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CON1"      (component BitIO)
   - CON1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "Slaver_Pow_Ctrl" (component BitIO)
   - Slaver_Pow_Ctrl_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_RLY_POS" (component BitIO)
   - CPU_RLY_POS_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - CPU_RLY_POS_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_RLY_NEG" (component BitIO)
   - CPU_RLY_NEG_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - CPU_RLY_NEG_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_RLY_PRE" (component BitIO)
   - CPU_RLY_PRE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - CPU_RLY_PRE_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_RLY_CHG" (component BitIO)
   - CPU_RLY_CHG_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - CPU_RLY_CHG_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_RLY_CTRL" (component BitIO)
   - CPU_RLY_CTRL_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "RELAY_DIG_ST34" (component BitIO)
   - RELAY_DIG_ST34_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "RELAY_DIG_ST12" (component BitIO)
   - RELAY_DIG_ST12_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "AI1"       (component ADC)
   - AI1_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - AI1_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - AI1_MeasureChanWait -This method performs one measurement on one channel and waits till the end of the measurement. (Note: 
                If the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - AI1_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.

Module "AI2"       (component ADC)
   - AI2_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - AI2_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - AI2_MeasureChanWait -This method performs one measurement on one channel and waits till the end of the measurement. (Note: 
                If the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - AI2_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.

Module "CHG_CAN_POW" (component BitIO)
   - CHG_CAN_POW_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUCAN_CAR_EN" (component BitIO)
   - CPUCAN_CAR_EN_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUCAN_INT_EN" (component BitIO)
   - CPUCAN_INT_EN_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUCSO"    (component BitIO)
   - CPUCSO_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CPUCSI"    (component BitIO)
   - CPUCSI_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUCSCK"   (component BitIO)
   - CPUCSCK_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUCCS"    (component BitIO)
   - CPUCCS_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "ExtEE_Sck" (component BitIO)
   - ExtEE_Sck_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - ExtEE_Sck_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - ExtEE_Sck_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "ExtEE_Sda" (component BitIO)
   - ExtEE_Sda_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExtEE_Sda_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExtEE_Sda_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - ExtEE_Sda_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - ExtEE_Sda_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "CPU_CAR_CAN_STB" (component BitIO)
   - CPU_CAR_CAN_STB_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_CAR_CAN_ERR" (component BitIO)
   - CPU_CAR_CAN_ERR_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "ExtEE_Wp"  (component BitIO)
   - ExtEE_Wp_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - ExtEE_Wp_SetOutput -Sets a pin direction to output (available only if the direction = _[input/output]_).
   - ExtEE_Wp_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - ExtEE_Wp_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - ExtEE_Wp_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "AC_CP_IOC" (component Capture)
   - AC_CP_IOC_Enable -This method enables the component - it starts the capture. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - AC_CP_IOC_Disable -This method disables the component - it stops the capture. No events will be generated.
   - AC_CP_IOC_EnableEvent -This method enables the events. This method is available only if any event is selected.
   - AC_CP_IOC_DisableEvent -This method disables the events.  This method is available only if any event is selected.
   - AC_CP_IOC_Reset -This method resets the counter register (see implementation note in <General Info>).
   - AC_CP_IOC_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in <General 
                Info>). The method does not return valid value after initialization or after <Reset> until new capture event 
                (even if the returned Error code is ERR_OK).

Module "RELAY_CHG" (component BitIO)
   - RELAY_CHG_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "RELAY_PRE" (component BitIO)
   - RELAY_PRE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "RELAY_NEG" (component BitIO)
   - RELAY_NEG_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "RELAY_POS" (component BitIO)
   - RELAY_POS_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CPUDO2"    (component BitIO)
   - CPUDO2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUDO1"    (component BitIO)
   - CPUDO1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_RLY_HEAT" (component BitIO)
   - CPU_RLY_HEAT_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPU_RLY_FAN" (component BitIO)
   - CPU_RLY_FAN_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "CPUEE"     (component IntEEPROM)
   - CPUEE_SetByte -This method writes a given byte to a specified address in EEPROM. The method also sets address pointer for 
                <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer is set to 
                address passed as the parameter.
   - CPUEE_GetByte -This method reads a byte from a specified EEPROM address. The method also sets address pointer for 
                <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer is set to 
                address passed as the parameter.
   - CPUEE_SetWord -This method writes a given word (2 bytes) to the specified address in EEPROM. The method also sets address 
                pointer for <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer 
                is set to address passed as the parameter + 1.
   - CPUEE_GetWord -This method reads a word (2 bytes) from the specified EEPROM address. The method also sets address pointer 
                for <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer is set to 
                address passed as the parameter + 1.
   - CPUEE_SetLong -This method writes a given long word (4 bytes) to the specified address in EEPROM. The method also sets 
                address pointer for <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The 
                pointer is set to address passed as the parameter + 3.
   - CPUEE_GetLong -This method reads a long word (4 bytes) from the specified EEPROM address. The method also sets address 
                pointer for <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer 
                is set to address passed as the parameter + 3.
   - CPUEE_Partition -The method checks current partitions of D-Flash and buffer RAM used for Emulated EEPROM and compares it 
                to "D-Flash sector count (DFPART)" and "Buffer RAM sector count for Emulated EEPROM (ERPART)" settings. If the 
                settings equals with current partition, the method just enables EEPROM emulation. If the settings differ, the 
                method proceeds to full partition of D-Flash memory according to ERPART and DFPART settings and enables 
                Emulated EEPROM feature. Warning: All data in D-Flash memory will be erased during full partition process. Full 
                partition command is only provided if the cpu runs in unsecured special mode otherwise the method returns error 
                code (ERR_NOTAVAIL). If "<Partition D-Flash in init>" property is set to yes, this method is automatically 
                called in init.

Module "AM2_GPRS"  (component AsynchroSerial)
   - AM2_GPRS_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is 
                available on the selected CPU and the receiver is configured to use DMA controller then this method only sets 
                the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInRxBuf method. See 
                an example of a typical usage for details about the communication using DMA.
   - AM2_GPRS_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.  [ Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets selected DMA channel. Then the status of the DMA transfer can 
                be checked using GetCharsInTxBuf method. See an example of a typical usage for details about communication 
                using DMA.

Module "AM1_SD"    (component AsynchroSerial)
   - AM1_SD_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is 
                available on the selected CPU and the receiver is configured to use DMA controller then this method only sets 
                the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInRxBuf method. See 
                an example of a typical usage for details about the communication using DMA.
   - AM1_SD_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.  [ Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets selected DMA channel. Then the status of the DMA transfer can 
                be checked using GetCharsInTxBuf method. See an example of a typical usage for details about communication 
                using DMA.

Module "AM3_GPS"   (component AsynchroSerial)
   - AM3_GPS_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is 
                available on the selected CPU and the receiver is configured to use DMA controller then this method only sets 
                the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInRxBuf method. See 
                an example of a typical usage for details about the communication using DMA.
   - AM3_GPS_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.  [ Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets selected DMA channel. Then the status of the DMA transfer can 
                be checked using GetCharsInTxBuf method. See an example of a typical usage for details about communication 
                using DMA.

Module "Cpu"       (component MC9S12XEP100_144)
   - Cpu_EnableInt -Enable maskable interrupts
   - Cpu_DisableInt -Disable maskable interrupts
   - Cpu_SetWaitMode -Set low power mode - Wait mode.  For more information about the wait mode see documentation of this CPU.  
                Release from Wait mode: Reset or interrupt
   - Cpu_SetStopMode -Set low power mode - Stop mode.  For more information about the stop mode see documentation of this CPU.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.
   - Cpu_GetResetSource -This method returns source of last reset.

===================================================================================
