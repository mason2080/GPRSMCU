/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : Cpu.h
**     Project   : mcal
**     Processor : MC9S12XEP100MAG
**     Component : MC9S12XEP100_144
**     Version   : Component 01.003, Driver 02.06, CPU db: 3.00.036
**     Datasheet : MC9S12XEP100 Rev. 1.19 12/2008
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2016/7/12, 10:32
**     Abstract  :
**         This component "MC9S12XEP100_144" implements properties, methods,
**         and events of the CPU.
**     Settings  :
**
**     Contents  :
**         EnableInt      - void Cpu_EnableInt(void);
**         DisableInt     - void Cpu_DisableInt(void);
**         SetWaitMode    - void Cpu_SetWaitMode(void);
**         SetStopMode    - void Cpu_SetStopMode(void);
**         Delay100US     - void Cpu_Delay100US(word us100);
**         GetResetSource - byte Cpu_GetResetSource(void);
**
**     Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __Cpu
#define __Cpu

/* Active configuration define symbol */
#define PEcfg_XEQ384MAG 1U

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE Cpu. */


#pragma DATA_SEG DEFAULT               /* Select data segment "DEFAULT" */

/* One of the following constants is return by the method GetResetSource */
#define CPU_POWER_ON_RESET          0x01U /*< This value is return if last reset has been caused by Low level detection at the RESET pin (External Eeset).     */
#define CPU_WATCHDOG_RESET          0x02U /*< This value is return if the last reset has been caused by COP. */
#define CPU_CLOCK_MONITOR_RESET     0x03U /*< This value is return if the last reset has been caused by Clock monitor failure. */
#define CPU_LVI_RESET               0x04U /*< This value is return if the last reset has been caused by Low voltage detection. */
#define CPU_ILLEGAL_ADDRESS_RESET   0x05U /*< This value is return if the last reset has been caused by Illegal Address access. */
#define CPU_EXTERNAL_RESET          0x06U /*< This value is return if the last reset has been caused by External reset. */

#define CPU_BUS_CLK_HZ              0x02DC6C00UL /* Initial value of the bus clock frequency in Hz */

#define CPU_INSTR_CLK_HZ            0x02DC6C00UL /* Initial value of the instruction clock frequency in Hz */

#define CPU_EXT_CLK_HZ              0x007A1200UL /* Value of the main clock frequency (crystal or external clock) in Hz */

#define CPU_TICK_NS                 0x7DU /* CPU tick is a unit derived from the frequency of external clock source. If no external clock is enabled or available it is derived from the value of internal clock source. The value of this constant represents period of the clock source in ns. */

#define CPU_CORE_HCS12X                /* Specification of the core type of the selected cpu */
#define CPU_DERIVATIVE_MC9S12XEP100    /* Name of the selected cpu derivative */
#define CPU_PARTNUM_MC9S12XEP100MAG    /* Part number of the selected cpu */

/* Global variables */

extern volatile byte LastResetSource;  /* Source of last reset */
extern volatile byte CCR_reg;          /* Current CCR reegister */

/*Shadow variables*/

extern byte Shadow_K;                  /* Shadow variable for I/O components */
extern byte Shadow_C;                  /* Shadow variable for I/O components */
extern byte Shadow_H;                  /* Shadow variable for I/O components */
extern byte Shadow_D;                  /* Shadow variable for I/O components */
extern byte Shadow_J;                  /* Shadow variable for I/O components */

/* Entry point routine(s) prototypes */

#pragma CODE_SEG __NEAR_SEG NON_BANKED
void _EntryPoint(void);
/*
** ===================================================================
**     Method      :  _EntryPoint (component MC9S12XEP100_144)
**
**     Description :
**         Initializes the whole system like timing and so on. At the end 
**         of this function, the C startup is invoked to initialize stack,
**         memory areas and so on.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void _WatchDog_EntryPoint(void);
/*
** ===================================================================
**     Method      :  _WatchDog_EntryPoint (component MC9S12XEP100_144)
**
**     Description :
**         This event is called immediately after fetching of the 
**         WatchDog reset vector, i.e. Processor Expert initialization 
**         and startup initialization have not been done before.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* Interrupt routine(s) prototypes */

void Cpu_Delay100US(word us100);
/*
** ===================================================================
**     Method      :  Cpu_Delay100US (component MC9S12XEP100_144)
**
**     Description :
**         This method realizes software delay. The length of delay
**         is at least 100 microsecond multiply input parameter
**         [us100]. As the delay implementation is not based on real
**         clock, the delay time may be increased by interrupt
**         service routines processed during the delay. The method
**         is independent on selected speed mode.
**     Parameters  :
**         NAME            - DESCRIPTION
**         us100           - Number of 100 us delay repetitions.
**                         - The value of zero results in maximal 
**                           delay of approx. 6.5 seconds.
**     Returns     : Nothing
** ===================================================================
*/

/* Forward declaration of the default interrupt routine(s) */
__interrupt void Cpu_Interrupt(void);

#pragma CODE_SEG DEFAULT

#define Cpu_SetStopMode() \
  /*lint -save  -e950 Disable MISRA rule (1.1) checking. */\
  {__asm("ANDCC #0x7F"); __asm("STOP"); } \
  /*lint -restore Enable MISRA rule (1.1) checking. */
/*
** ===================================================================
**     Method      :  Cpu_SetStopMode (component MC9S12XEP100_144)
**
**     Description :
**         Set low power mode - Stop mode.
**         For more information about the stop mode see
**         documentation of this CPU.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define Cpu_SetWaitMode() \
  /*lint -save  -e950 Disable MISRA rule (1.1) checking. */\
  __asm("WAI") \
  /*lint -restore Enable MISRA rule (1.1) checking. */
/*
** ===================================================================
**     Method      :  Cpu_SetWaitMode (component MC9S12XEP100_144)
**
**     Description :
**         Set low power mode - Wait mode.
**         For more information about the wait mode see
**         documentation of this CPU.
**         Release from Wait mode: Reset or interrupt
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define   Cpu_DisableInt()  __DI()     /* Disable interrupts */
/*
** ===================================================================
**     Method      :  Cpu_DisableInt (component MC9S12XEP100_144)
**
**     Description :
**         Disable maskable interrupts
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define   Cpu_EnableInt()  __EI()      /* Enable interrupts */
/*
** ===================================================================
**     Method      :  Cpu_EnableInt (component MC9S12XEP100_144)
**
**     Description :
**         Enable maskable interrupts
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

byte Cpu_GetResetSource(void);
/*
** ===================================================================
**     Method      :  Cpu_GetResetSource (component MC9S12XEP100_144)
**
**     Description :
**         This method returns soucre of last reset.
**     Parameters  : None
**     Returns     :
**         ---             - One of the following constants is
**                           return by this method
**                           CPU_POWER_ON_RESET             - Last
**                           reset has been caused by Low level
**                           detection at the RESET pin (External
**                           Eeset). 
**                           CPU_WATCHDOG_RESET             - Last
**                           reset has been caused by COP.
**                           CPU_CLOCK_MONITOR_RESET    - Last reset
**                           has been caused by Clock monitor failure.
**                           CPU_LVI_RESET
**                           - Last reset has been caused by Low
**                           voltage detection.
**                           CPU_ILLEGAL_ADDRESS_RESET - Last reset
**                           has been caused by Illegal Address
**                           access.
**                           CPU_EXTERNAL_RESET                - Last
**                           reset has been caused by External reset.
** ===================================================================
*/

void PE_low_level_init(void);
/*
** ===================================================================
**     Method      :  PE_low_level_init (component MC9S12XEP100_144)
**
**     Description :
**         Initializes components and provides common register 
**         initialization. The method is called automatically as a part 
**         of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END Cpu. */

#endif /* ifndef __Cpu */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.04 [04.46]
**     for the Freescale HCS12X series of microcontrollers.
**
** ###################################################################
*/
