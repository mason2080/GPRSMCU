/*
** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : mcal.PRM
**     Project   : mcal
**     Processor : MC9S12XEQ384MAG
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2013/11/21, 15:04
**     Abstract  :
**        This file is used by the linker. It describes files to be linked,
**        memory ranges, stack size, etc. For detailed description of the PRM file
**        see CodeWarrior documentation. This file is generated by default.
**        You can switch off generation by setting the property
**        "Generate PRM file = no" on the "Build options" tab in CPU component and then modify
**        this file if needed.
**
**     Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################
*/

NAMES
                                 
END

SEGMENTS  /* Here all RAM/ROM areas of the device are listed. Used in PLACEMENT below. */
/* non-paged RAM */
      RAM_SHARE     = READ_WRITE  DATA_NEAR            0x2000 TO   0x27FF ALIGN 2[1:1]; /* word align for XGATE accesses, 256 bytes */
      RAM           = READ_WRITE  DATA_NEAR            0x2800 TO   0x3FEE;        //0x3FF0
      BOOTRAM       = NO_INIT       0x3FEF  TO   0x3FF0;
/* non-banked FLASH */
      ROM_4000      = READ_ONLY   DATA_NEAR IBCC_NEAR 0x4000 TO 0x7FFF; 
      ROM_C000      = READ_ONLY   DATA_NEAR IBCC_NEAR 0xC000 TO 0xE9FF;//0xDBFF;
      //ROM_BOOT      = READ_ONLY   DATA_NEAR IBCC_NEAR 0xDC00 TO 0xDCFF; 
          
      BOOT_ROM_VECTOR = READ_ONLY     0xEB00 TO   0xEBFF;  /*bootloader 中断向量表*******/
      BOOT_ROM_5K     = READ_ONLY     0xEC00 TO   0xFEFF;  /*大小5K*/
        
      //ROM_C000_VECTOR = READ_ONLY DATA_NEAR IBCC_NEAR 0xDD00 TO 0xDFFF; // keep for place vector in BootLoader
      //ROM_E000      = READ_ONLY     0xE000 TO   0xFBFF; // keep for place bootloader
      
      
      
/* paged RAM:                       0x1000 TO   0x1FFF; addressed through RPAGE */
  /*    RAM_F0        = READ_WRITE  DATA_FAR           0xF01000 TO 0xF01FFF; 
      RAM_F1        = READ_WRITE  DATA_FAR           0xF11000 TO 0xF11FFF; 
      RAM_F2        = READ_WRITE  DATA_FAR           0xF21000 TO 0xF21FFF; 
      RAM_F3        = READ_WRITE  DATA_FAR           0xF31000 TO 0xF31FFF; 
      RAM_F4        = READ_WRITE  DATA_FAR           0xF41000 TO 0xF41FFF; 
      RAM_F5        = READ_WRITE  DATA_FAR           0xF51000 TO 0xF51FFF; 
      RAM_F6        = READ_WRITE  DATA_FAR           0xF61000 TO 0xF61FFF; 
      RAM_F7        = READ_WRITE  DATA_FAR           0xF71000 TO 0xF71FFF; */ // all place to RAM_F01234567 ,32k
      RAM_XGATE_STK_L_ = NO_INIT DATA_FAR            0xF81000 TO 0xF8107D; 
      RAM_XGATE_STK_L = NO_INIT DATA_FAR             0xF8107E TO 0xF8107F; 
      RAM_XGATE_STK_H_ = NO_INIT DATA_FAR            0xF81080 TO 0xF810FD; 
      RAM_XGATE_STK_H = NO_INIT DATA_FAR             0xF810FE TO 0xF810FF; 
      RAM_F8        = READ_WRITE  DATA_FAR           0xF81100 TO 0xF81FFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0x8100..0x8FFF */
      RAM_F9        = READ_WRITE  DATA_FAR           0xF91000 TO 0xF91FFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0x9000..0x9FFF */
      RAM_FA        = READ_WRITE  DATA_FAR           0xFA1000 TO 0xFA1FFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0xA000..0xAFFF */
      RAM_FB        = READ_WRITE  DATA_FAR           0xFB1000 TO 0xFB1FFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0xB000..0xBFFF */
      RAM_FC        = READ_WRITE  DATA_FAR           0xFC1000 TO 0xFC1FFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0xC000..0xCFFF */
      RAM_FD        = READ_WRITE  DATA_FAR           0xFD1000 TO 0xFD1FFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0xD000..0xDFFF */
/*    RAM_FE        = READ_WRITE  0xFE1000 TO 0xFE1FFF; intentionally not defined: equivalent to RAM: 0x2000..0x2FFF */
/*    RAM_FF        = READ_WRITE  0xFF1000 TO 0xFF1FFF; intentionally not defined: equivalent to RAM: 0x3000..0x3FFF */

      RAM_F01234567 = READ_WRITE  0xF0000'G TO 0xF7FFF'G;
    //RAM_FABCD     = READ_WRITE  0xF0000'G TO 0xFDFFF'G;
    
 /* paged FLASH:                     0x8000 TO   0xBFFF; addressed through PPAGE */
      PAGE_C0       = READ_ONLY   DATA_FAR IBCC_FAR  0xC08000 TO 0xC0BFFF; 
      PAGE_C1       = READ_ONLY   DATA_FAR IBCC_FAR  0xC18000 TO 0xC1BFFF; 
      PAGE_C2       = READ_ONLY   DATA_FAR IBCC_FAR  0xC28000 TO 0xC2BFFF; 
      PAGE_C3       = READ_ONLY   DATA_FAR IBCC_FAR  0xC38000 TO 0xC3BFFF; 
      PAGE_C4       = READ_ONLY   DATA_FAR IBCC_FAR  0xC48000 TO 0xC4BFFF; 
      PAGE_C5       = READ_ONLY   DATA_FAR IBCC_FAR  0xC58000 TO 0xC5BFFF; 
      PAGE_C6       = READ_ONLY   DATA_FAR IBCC_FAR  0xC68000 TO 0xC6BFFF; 
      PAGE_C7       = READ_ONLY   DATA_FAR IBCC_FAR  0xC78000 TO 0xC7BFFF; 

      PAGE_C8       = READ_ONLY   DATA_FAR IBCC_FAR  0xC88000 TO 0xC8BFFF; 
      PAGE_C9       = READ_ONLY   DATA_FAR IBCC_FAR  0xC98000 TO 0xC9BFFF; 
      PAGE_CA       = READ_ONLY   DATA_FAR IBCC_FAR  0xCA8000 TO 0xCABFFF; 
      PAGE_CB       = READ_ONLY   DATA_FAR IBCC_FAR  0xCB8000 TO 0xCBBFFF; 
      PAGE_CC       = READ_ONLY   DATA_FAR IBCC_FAR  0xCC8000 TO 0xCCBFFF; 
      PAGE_CD       = READ_ONLY   DATA_FAR IBCC_FAR  0xCD8000 TO 0xCDBFFF; 
      PAGE_CE       = READ_ONLY   DATA_FAR IBCC_FAR  0xCE8000 TO 0xCEBFFF; 
      PAGE_CF       = READ_ONLY   DATA_FAR IBCC_FAR  0xCF8000 TO 0xCFBFFF; 

      PAGE_D0       = READ_ONLY   DATA_FAR IBCC_FAR  0xD08000 TO 0xD0BFFF; 
      PAGE_D1       = READ_ONLY   DATA_FAR IBCC_FAR  0xD18000 TO 0xD1BFFF; 
      PAGE_D2       = READ_ONLY   DATA_FAR IBCC_FAR  0xD28000 TO 0xD2BFFF; 
      PAGE_D3       = READ_ONLY   DATA_FAR IBCC_FAR  0xD38000 TO 0xD3BFFF; 
      PAGE_D4       = READ_ONLY   DATA_FAR IBCC_FAR  0xD48000 TO 0xD4BFFF; 
      PAGE_D5       = READ_ONLY   DATA_FAR IBCC_FAR  0xD58000 TO 0xD5BFFF; 
      PAGE_D6       = READ_ONLY   DATA_FAR IBCC_FAR  0xD68000 TO 0xD6BFFF; 
      PAGE_D7       = READ_ONLY   DATA_FAR IBCC_FAR  0xD78000 TO 0xD7BFFF; 

      PAGE_D8       = READ_ONLY   DATA_FAR IBCC_FAR  0xD88000 TO 0xD8BFFF; 
      PAGE_D9       = READ_ONLY   DATA_FAR IBCC_FAR  0xD98000 TO 0xD9BFFF; 
      PAGE_DA       = READ_ONLY   DATA_FAR IBCC_FAR  0xDA8000 TO 0xDABFFF; 
      PAGE_DB       = READ_ONLY   DATA_FAR IBCC_FAR  0xDB8000 TO 0xDBBFFF; 
      PAGE_DC       = READ_ONLY   DATA_FAR IBCC_FAR  0xDC8000 TO 0xDCBFFF; 
      PAGE_DD       = READ_ONLY   DATA_FAR IBCC_FAR  0xDD8000 TO 0xDDBFFF; 
      PAGE_DE       = READ_ONLY   DATA_FAR IBCC_FAR  0xDE8000 TO 0xDEBFFF; 
      PAGE_DF       = READ_ONLY   DATA_FAR IBCC_FAR  0xDF8000 TO 0xDFBFFF; 

      PAGE_E0_0     = READ_ONLY  DATA_FAR IBCC_FAR   0xE08000 TO 0xE087FF; /* cannot be mapped to XGATE; XGATE sees registers here */
      PAGE_E0       = READ_ONLY   DATA_FAR IBCC_FAR  0xE08800 TO 0xE0BFFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0x0800..0x3FFF        */
      PAGE_E1       = READ_ONLY   DATA_FAR IBCC_FAR  0xE18000 TO 0xE1BFFF ALIGN 2[1:1]; /* is also mapped to XGATE:  0x4000..0x7FFF        */
      // cannot be mapped to XGATE; this module should NOT be used for HC12 code when also used for XGATE code since
      //the HC12 will have priority over the XGATE accessing the FLASH modules resulting very poor performance of
      //the XGATE: Check allocation of this ranges in PLACEMENT below!
      PAGE_E2       = READ_ONLY   DATA_FAR IBCC_FAR  0xE28000 TO 0xE2BFFF; 
      PAGE_E3       = READ_ONLY   DATA_FAR IBCC_FAR  0xE38000 TO 0xE3BFFF; 
      PAGE_E4       = READ_ONLY   DATA_FAR IBCC_FAR  0xE48000 TO 0xE4BFFF; 
      PAGE_E5       = READ_ONLY   DATA_FAR IBCC_FAR  0xE58000 TO 0xE5BFFF; 
      PAGE_E6       = READ_ONLY   DATA_FAR IBCC_FAR  0xE68000 TO 0xE6BFFF; 
      PAGE_E7       = READ_ONLY   DATA_FAR IBCC_FAR  0xE78000 TO 0xE7BFFF; 

      PAGE_E8       = READ_ONLY   DATA_FAR IBCC_FAR  0xE88000 TO 0xE8BFFF; 
      PAGE_E9       = READ_ONLY   DATA_FAR IBCC_FAR  0xE98000 TO 0xE9BFFF; 
      PAGE_EA       = READ_ONLY   DATA_FAR IBCC_FAR  0xEA8000 TO 0xEABFFF; 
      PAGE_EB       = READ_ONLY   DATA_FAR IBCC_FAR  0xEB8000 TO 0xEBBFFF; 
      PAGE_EC       = READ_ONLY   DATA_FAR IBCC_FAR  0xEC8000 TO 0xECBFFF; 
      PAGE_ED       = READ_ONLY   DATA_FAR IBCC_FAR  0xED8000 TO 0xEDBFFF; 
      PAGE_EE       = READ_ONLY   DATA_FAR IBCC_FAR  0xEE8000 TO 0xEEBFFF; 
      PAGE_EF       = READ_ONLY   DATA_FAR IBCC_FAR  0xEF8000 TO 0xEFBFFF; 

      PAGE_F0       = READ_ONLY   DATA_FAR IBCC_FAR  0xF08000 TO 0xF0BFFF; 
      PAGE_F1       = READ_ONLY   DATA_FAR IBCC_FAR  0xF18000 TO 0xF1BFFF; 
      PAGE_F2       = READ_ONLY   DATA_FAR IBCC_FAR  0xF28000 TO 0xF2BFFF; 
      PAGE_F3       = READ_ONLY   DATA_FAR IBCC_FAR  0xF38000 TO 0xF3BFFF; 
      PAGE_F4       = READ_ONLY   DATA_FAR IBCC_FAR  0xF48000 TO 0xF4BFFF; 
      PAGE_F5       = READ_ONLY   DATA_FAR IBCC_FAR  0xF58000 TO 0xF5BFFF; 
      PAGE_F6       = READ_ONLY   DATA_FAR IBCC_FAR  0xF68000 TO 0xF6BFFF; 
      PAGE_F7       = READ_ONLY   DATA_FAR IBCC_FAR  0xF78000 TO 0xF7BFFF; 

      PAGE_F8       = READ_ONLY   DATA_FAR IBCC_FAR  0xF88000 TO 0xF8BFFF; 
      PAGE_F9       = READ_ONLY   DATA_FAR IBCC_FAR  0xF98000 TO 0xF9BFFF; 
      PAGE_FA       = READ_ONLY   DATA_FAR IBCC_FAR  0xFA8000 TO 0xFABFFF; 
      PAGE_FB       = READ_ONLY   DATA_FAR IBCC_FAR  0xFB8000 TO 0xFBBFFF; 
      PAGE_FC       = READ_ONLY   DATA_FAR IBCC_FAR  0xFC8000 TO 0xFCBFFF; 
/*    PAGE_FD       = READ_ONLY   0xFD8000 TO 0xFDBFFF; intentionally not defined: equivalent to ROM_4000 */
      PAGE_FE       = READ_ONLY   DATA_FAR IBCC_FAR  0xFE8000 TO 0xFEBFFF; 
/*    PAGE_FF       = READ_ONLY   0xFF8000 TO 0xFFBFFF; intentionally not defined: equivalent to ROM_C000 */
END

PLACEMENT /* here all predefined and user segments are placed into the SEGMENTS defined above. */
    _PRESTART,
    STARTUP,
    ROM_VAR,
    STRINGS,
    NON_BANKED,
    V_SECT_CAN_ISR,     /* define for canbedded */
    COPY                INTO   ROM_4000,ROM_C000;
      DEFAULT_ROM       INTO           PAGE_FE,          PAGE_FC, PAGE_FB, PAGE_FA, PAGE_F9, PAGE_F8, 
                              PAGE_F7, PAGE_F6, PAGE_F5, PAGE_F4, PAGE_F3, PAGE_F2, PAGE_F1, PAGE_F0, 
                              PAGE_EF, PAGE_EE, PAGE_ED, PAGE_EC, PAGE_EB, PAGE_EA, PAGE_E9, PAGE_E8, 
                              PAGE_E7, PAGE_E6, PAGE_E5, PAGE_E4, PAGE_E3, PAGE_E2, 
                              /* PAGE_E1 intentionally not listed: assigned to XGATE */

                              /* PAGE_E0 intentionally not listed: assigned to XGATE */
                              PAGE_E0_0,

                              PAGE_DF, PAGE_DE, PAGE_DD, PAGE_DC, PAGE_DB, PAGE_DA, PAGE_D9, PAGE_D8, 
                              PAGE_D7, PAGE_D6, PAGE_D5, PAGE_D4, PAGE_D3, PAGE_D2, PAGE_D1, PAGE_D0, 
                              PAGE_CF, PAGE_CE, PAGE_CD, PAGE_CC, PAGE_CB, PAGE_CA, PAGE_C9, PAGE_C8, 
                              PAGE_C7, PAGE_C6, PAGE_C5, PAGE_C4, PAGE_C3, PAGE_C2, PAGE_C1, PAGE_C0;
      XGATE_STRING_FLASH,     /* XGATE strings that should always go into flash */
      XGATE_CONST_FLASH,      /* XGATE constants what should always go into flash */
      XGATE_CODE_FLASH        /* XGATE code that should always run out of flash */
                        INTO  PAGE_E0, PAGE_E1; /* FLASH accessible by XGATE */
    //.stackstart,            /* eventually used for OSEK kernel awareness: Main-Stack Start */
      SSTACK,                 /* allocate stack first to avoid overwriting variables on overflow */
    //.stackend,              /* eventually used for OSEK kernel awareness: Main-Stack End */
      DEFAULT_RAM             /* all variables, the default RAM location */
                        INTO  RAM;
      SHARED_DATA            /* variables that are shared between CPU12 and XGATE */
                        INTO  RAM_SHARE;

      XGATE_VECTORS,          /* XGATE vector table has to be copied into RAM by HCS12X */
      XGATE_STRING,           /* XGATE string literals have to be copied into RAM by HCS12X */
      XGATE_CONST,            /* XGATE constants have to be copied into RAM by HCS12X */
      XGATE_CODE,             /* XGATE functions have to be copied into RAM by HCS12X */
      XGATE_STRING_RAM,       /* XGATE strings that should always go into RAM */
      XGATE_CONST_RAM,        /* XGATE constants what should always go into RAM */
      XGATE_CODE_RAM,         /* XGATE code that should always run out of RAM */
      XGATE_DATA              /* data that are accessed by XGATE only */
                           INTO  RAM_F8, RAM_F9, RAM_FA, RAM_FB /*, RAM_FC, RAM_FD */;
    //PAGED_RAM           INTO   RAM_FA, RAM_FB, RAM_FC, RAM_FD;
   
    PAGED_RAM           INTO   RAM_F01234567;
     BOOT_RAM            INTO  BOOTRAM;
    //BOOT_INTERFACE_ROM     INTO    ROM_BOOT; // For Access To BootLoad                        
      XGATE_STK_L       INTO  RAM_XGATE_STK_L;
      XGATE_STK_H       INTO  RAM_XGATE_STK_H;
END

INIT _EntryPoint                       /* The entry point of the application. This function is generated into the CPU module. */

STACKSIZE 0x0400                       /* Size of the system stack. Value can be changed on the "Build options" tab */
